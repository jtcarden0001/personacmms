# run `docker-compose -f tools/docker/compose.yaml up` to start the services
# composes up dev.Dockerfile and postgres:14.13-alpine3.20
services:
  backend:
    build: 
      context: ../../
      dockerfile: tools/docker/debug.Dockerfile
    ports:
      # TODO: move port configuration to centralized config
      - "8080:8080"
      - "40000:40000"
    environment:
      - DATABASE_HOST=debug-db
      - DATABASE_PORT=5432 # replace with ${PCMMS_DB_PORT} once we figure out blank env
      - DATABASE_USER=${PCMMS_DB_USER} # replace with ${PCMMS_DB_USER} once we figure out blank env
      - DATABASE_PASSWORD=${PCMMS_DB_PASSWORD} # replace with ${PCMMS_DB_PASSWORD} once we figure out blank env
      - DATABASE_NAME=${PCMMS_DB_NAME} # replace with ${PCMMS_DB_NAME} once store is updated to accept
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
        restart: true
  db:
    image: postgres:14.13-alpine3.20
    container_name: debug-db
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${PCMMS_DB_USER} # replace with ${PCMMS_DB_USER} once we figure out blank env
      - POSTGRES_PASSWORD=${PCMMS_DB_PASSWORD} # replace with ${PCMMS_DB_PASSWORD} once we figure out blank env
      - POSTGRES_DB=${PCMMS_DB_NAME} # replace with ${PCMMS_DB_NAME} once store is updated to accept
    volumes: 
      - debug-db-data:/var/lib/postgresql/data
      - ../../internal/store/postgres/ddl/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d personacmms-prod"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

volumes:
  debug-db-data:

networks:
  app_network: