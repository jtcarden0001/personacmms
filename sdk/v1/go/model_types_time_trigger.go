/*
PersonaCMMS API

This is the Personal Computer Maintenance Management System REST API.

API version: 1.0
Contact: greenrivercodelabs@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TypesTimeTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesTimeTrigger{}

// TypesTimeTrigger struct for TypesTimeTrigger
type TypesTimeTrigger struct {
	Quantity int32 `json:"quantity"`
	TimeUnit string `json:"time_unit"`
}

type _TypesTimeTrigger TypesTimeTrigger

// NewTypesTimeTrigger instantiates a new TypesTimeTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesTimeTrigger(quantity int32, timeUnit string) *TypesTimeTrigger {
	this := TypesTimeTrigger{}
	this.Quantity = quantity
	this.TimeUnit = timeUnit
	return &this
}

// NewTypesTimeTriggerWithDefaults instantiates a new TypesTimeTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesTimeTriggerWithDefaults() *TypesTimeTrigger {
	this := TypesTimeTrigger{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *TypesTimeTrigger) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *TypesTimeTrigger) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *TypesTimeTrigger) SetQuantity(v int32) {
	o.Quantity = v
}

// GetTimeUnit returns the TimeUnit field value
func (o *TypesTimeTrigger) GetTimeUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value
// and a boolean to check if the value has been set.
func (o *TypesTimeTrigger) GetTimeUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeUnit, true
}

// SetTimeUnit sets field value
func (o *TypesTimeTrigger) SetTimeUnit(v string) {
	o.TimeUnit = v
}

func (o TypesTimeTrigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesTimeTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	toSerialize["time_unit"] = o.TimeUnit
	return toSerialize, nil
}

func (o *TypesTimeTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"time_unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTypesTimeTrigger := _TypesTimeTrigger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTypesTimeTrigger)

	if err != nil {
		return err
	}

	*o = TypesTimeTrigger(varTypesTimeTrigger)

	return err
}

type NullableTypesTimeTrigger struct {
	value *TypesTimeTrigger
	isSet bool
}

func (v NullableTypesTimeTrigger) Get() *TypesTimeTrigger {
	return v.value
}

func (v *NullableTypesTimeTrigger) Set(val *TypesTimeTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesTimeTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesTimeTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesTimeTrigger(val *TypesTimeTrigger) *NullableTypesTimeTrigger {
	return &NullableTypesTimeTrigger{value: val, isSet: true}
}

func (v NullableTypesTimeTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesTimeTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


