/*
PersonaCMMS API

This is the Personal Computer Maintenance Management System REST API.

API version: 1.0
Contact: greenrivercodelabs@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TypesAsset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesAsset{}

// TypesAsset struct for TypesAsset
type TypesAsset struct {
	Description *string `json:"description,omitempty"`
	Make *string `json:"make,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	ModelNumber *string `json:"modelNumber,omitempty"`
	SerialNumber *string `json:"serialNumber,omitempty"`
	Title string `json:"title"`
	Year *int32 `json:"year,omitempty"`
}

type _TypesAsset TypesAsset

// NewTypesAsset instantiates a new TypesAsset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesAsset(title string) *TypesAsset {
	this := TypesAsset{}
	this.Title = title
	return &this
}

// NewTypesAssetWithDefaults instantiates a new TypesAsset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesAssetWithDefaults() *TypesAsset {
	this := TypesAsset{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TypesAsset) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesAsset) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TypesAsset) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TypesAsset) SetDescription(v string) {
	o.Description = &v
}

// GetMake returns the Make field value if set, zero value otherwise.
func (o *TypesAsset) GetMake() string {
	if o == nil || IsNil(o.Make) {
		var ret string
		return ret
	}
	return *o.Make
}

// GetMakeOk returns a tuple with the Make field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesAsset) GetMakeOk() (*string, bool) {
	if o == nil || IsNil(o.Make) {
		return nil, false
	}
	return o.Make, true
}

// HasMake returns a boolean if a field has been set.
func (o *TypesAsset) HasMake() bool {
	if o != nil && !IsNil(o.Make) {
		return true
	}

	return false
}

// SetMake gets a reference to the given string and assigns it to the Make field.
func (o *TypesAsset) SetMake(v string) {
	o.Make = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *TypesAsset) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesAsset) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *TypesAsset) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *TypesAsset) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetModelNumber returns the ModelNumber field value if set, zero value otherwise.
func (o *TypesAsset) GetModelNumber() string {
	if o == nil || IsNil(o.ModelNumber) {
		var ret string
		return ret
	}
	return *o.ModelNumber
}

// GetModelNumberOk returns a tuple with the ModelNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesAsset) GetModelNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ModelNumber) {
		return nil, false
	}
	return o.ModelNumber, true
}

// HasModelNumber returns a boolean if a field has been set.
func (o *TypesAsset) HasModelNumber() bool {
	if o != nil && !IsNil(o.ModelNumber) {
		return true
	}

	return false
}

// SetModelNumber gets a reference to the given string and assigns it to the ModelNumber field.
func (o *TypesAsset) SetModelNumber(v string) {
	o.ModelNumber = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *TypesAsset) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesAsset) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *TypesAsset) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *TypesAsset) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetTitle returns the Title field value
func (o *TypesAsset) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TypesAsset) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TypesAsset) SetTitle(v string) {
	o.Title = v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *TypesAsset) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesAsset) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *TypesAsset) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *TypesAsset) SetYear(v int32) {
	o.Year = &v
}

func (o TypesAsset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesAsset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Make) {
		toSerialize["make"] = o.Make
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.ModelNumber) {
		toSerialize["modelNumber"] = o.ModelNumber
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	return toSerialize, nil
}

func (o *TypesAsset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTypesAsset := _TypesAsset{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTypesAsset)

	if err != nil {
		return err
	}

	*o = TypesAsset(varTypesAsset)

	return err
}

type NullableTypesAsset struct {
	value *TypesAsset
	isSet bool
}

func (v NullableTypesAsset) Get() *TypesAsset {
	return v.value
}

func (v *NullableTypesAsset) Set(val *TypesAsset) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesAsset(val *TypesAsset) *NullableTypesAsset {
	return &NullableTypesAsset{value: val, isSet: true}
}

func (v NullableTypesAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


