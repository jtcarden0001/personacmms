/*
PersonaCMMS API

This is the Personal Computer Maintenance Management System REST API.

API version: 1.0
Contact: greenrivercodelabs@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TypesUsageTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesUsageTrigger{}

// TypesUsageTrigger struct for TypesUsageTrigger
type TypesUsageTrigger struct {
	Quantity int32 `json:"quantity"`
	UsageUnit string `json:"usage_unit"`
}

type _TypesUsageTrigger TypesUsageTrigger

// NewTypesUsageTrigger instantiates a new TypesUsageTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesUsageTrigger(quantity int32, usageUnit string) *TypesUsageTrigger {
	this := TypesUsageTrigger{}
	this.Quantity = quantity
	this.UsageUnit = usageUnit
	return &this
}

// NewTypesUsageTriggerWithDefaults instantiates a new TypesUsageTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesUsageTriggerWithDefaults() *TypesUsageTrigger {
	this := TypesUsageTrigger{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *TypesUsageTrigger) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *TypesUsageTrigger) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *TypesUsageTrigger) SetQuantity(v int32) {
	o.Quantity = v
}

// GetUsageUnit returns the UsageUnit field value
func (o *TypesUsageTrigger) GetUsageUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UsageUnit
}

// GetUsageUnitOk returns a tuple with the UsageUnit field value
// and a boolean to check if the value has been set.
func (o *TypesUsageTrigger) GetUsageUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageUnit, true
}

// SetUsageUnit sets field value
func (o *TypesUsageTrigger) SetUsageUnit(v string) {
	o.UsageUnit = v
}

func (o TypesUsageTrigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesUsageTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	toSerialize["usage_unit"] = o.UsageUnit
	return toSerialize, nil
}

func (o *TypesUsageTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"usage_unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTypesUsageTrigger := _TypesUsageTrigger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTypesUsageTrigger)

	if err != nil {
		return err
	}

	*o = TypesUsageTrigger(varTypesUsageTrigger)

	return err
}

type NullableTypesUsageTrigger struct {
	value *TypesUsageTrigger
	isSet bool
}

func (v NullableTypesUsageTrigger) Get() *TypesUsageTrigger {
	return v.value
}

func (v *NullableTypesUsageTrigger) Set(val *TypesUsageTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesUsageTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesUsageTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesUsageTrigger(val *TypesUsageTrigger) *NullableTypesUsageTrigger {
	return &NullableTypesUsageTrigger{value: val, isSet: true}
}

func (v NullableTypesUsageTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesUsageTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


