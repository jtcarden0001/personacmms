/*
PersonaCMMS API

This is the Personal Computer Maintenance Management System REST API.

API version: 1.0
Contact: greenrivercodelabs@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TypesConsumableQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesConsumableQuantity{}

// TypesConsumableQuantity struct for TypesConsumableQuantity
type TypesConsumableQuantity struct {
	Quantity string `json:"quantity"`
}

type _TypesConsumableQuantity TypesConsumableQuantity

// NewTypesConsumableQuantity instantiates a new TypesConsumableQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesConsumableQuantity(quantity string) *TypesConsumableQuantity {
	this := TypesConsumableQuantity{}
	this.Quantity = quantity
	return &this
}

// NewTypesConsumableQuantityWithDefaults instantiates a new TypesConsumableQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesConsumableQuantityWithDefaults() *TypesConsumableQuantity {
	this := TypesConsumableQuantity{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *TypesConsumableQuantity) GetQuantity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *TypesConsumableQuantity) GetQuantityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *TypesConsumableQuantity) SetQuantity(v string) {
	o.Quantity = v
}

func (o TypesConsumableQuantity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesConsumableQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	return toSerialize, nil
}

func (o *TypesConsumableQuantity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTypesConsumableQuantity := _TypesConsumableQuantity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTypesConsumableQuantity)

	if err != nil {
		return err
	}

	*o = TypesConsumableQuantity(varTypesConsumableQuantity)

	return err
}

type NullableTypesConsumableQuantity struct {
	value *TypesConsumableQuantity
	isSet bool
}

func (v NullableTypesConsumableQuantity) Get() *TypesConsumableQuantity {
	return v.value
}

func (v *NullableTypesConsumableQuantity) Set(val *TypesConsumableQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesConsumableQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesConsumableQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesConsumableQuantity(val *TypesConsumableQuantity) *NullableTypesConsumableQuantity {
	return &NullableTypesConsumableQuantity{value: val, isSet: true}
}

func (v NullableTypesConsumableQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesConsumableQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


