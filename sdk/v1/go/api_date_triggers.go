/*
PersonaCMMS API

This is the Personal Computer Maintenance Management System REST API.

API version: 1.0
Contact: greenrivercodelabs@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DateTriggersAPIService DateTriggersAPI service
type DateTriggersAPIService service

type ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDeleteRequest struct {
	ctx context.Context
	ApiService *DateTriggersAPIService
	assetId string
	taskId string
	dateTriggerId string
}

func (r ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDeleteExecute(r)
}

/*
AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDelete Delete a date trigger

Delete a date trigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Task Id
 @param dateTriggerId Date Trigger Id
 @return ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDeleteRequest
*/
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDelete(ctx context.Context, assetId string, taskId string, dateTriggerId string) ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDeleteRequest {
	return ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
		dateTriggerId: dateTriggerId,
	}
}

// Execute executes the request
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDeleteExecute(r ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DateTriggersAPIService.AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/date-triggers/{dateTriggerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dateTriggerId"+"}", url.PathEscape(parameterValueToString(r.dateTriggerId, "dateTriggerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGetRequest struct {
	ctx context.Context
	ApiService *DateTriggersAPIService
	assetId string
	taskId string
	dateTriggerId string
}

func (r ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGetRequest) Execute() (*TypesDateTrigger, *http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGetExecute(r)
}

/*
AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGet Get a date trigger

Get a date trigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Task Id
 @param dateTriggerId Date Trigger Id
 @return ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGetRequest
*/
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGet(ctx context.Context, assetId string, taskId string, dateTriggerId string) ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGetRequest {
	return ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGetRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
		dateTriggerId: dateTriggerId,
	}
}

// Execute executes the request
//  @return TypesDateTrigger
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGetExecute(r ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGetRequest) (*TypesDateTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TypesDateTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DateTriggersAPIService.AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/date-triggers/{dateTriggerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dateTriggerId"+"}", url.PathEscape(parameterValueToString(r.dateTriggerId, "dateTriggerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutRequest struct {
	ctx context.Context
	ApiService *DateTriggersAPIService
	assetId string
	taskId string
	dateTriggerId string
	typesDateTrigger *TypesDateTrigger
}

// Date Trigger object
func (r ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutRequest) TypesDateTrigger(typesDateTrigger TypesDateTrigger) ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutRequest {
	r.typesDateTrigger = &typesDateTrigger
	return r
}

func (r ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutRequest) Execute() (*TypesDateTrigger, *http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutExecute(r)
}

/*
AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPut Update a date trigger

Update a date trigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Task Id
 @param dateTriggerId Date Trigger Id
 @return ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutRequest
*/
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPut(ctx context.Context, assetId string, taskId string, dateTriggerId string) ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutRequest {
	return ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
		dateTriggerId: dateTriggerId,
	}
}

// Execute executes the request
//  @return TypesDateTrigger
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutExecute(r ApiAssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPutRequest) (*TypesDateTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TypesDateTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DateTriggersAPIService.AssetsAssetIdTasksTaskIdDateTriggersDateTriggerIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/date-triggers/{dateTriggerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dateTriggerId"+"}", url.PathEscape(parameterValueToString(r.dateTriggerId, "dateTriggerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.typesDateTrigger == nil {
		return localVarReturnValue, nil, reportError("typesDateTrigger is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.typesDateTrigger
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssetsAssetIdTasksTaskIdDateTriggersGetRequest struct {
	ctx context.Context
	ApiService *DateTriggersAPIService
	assetId string
	taskId string
}

func (r ApiAssetsAssetIdTasksTaskIdDateTriggersGetRequest) Execute() ([]TypesDateTrigger, *http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdDateTriggersGetExecute(r)
}

/*
AssetsAssetIdTasksTaskIdDateTriggersGet List date triggers

List date triggers for a task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Task Id
 @return ApiAssetsAssetIdTasksTaskIdDateTriggersGetRequest
*/
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersGet(ctx context.Context, assetId string, taskId string) ApiAssetsAssetIdTasksTaskIdDateTriggersGetRequest {
	return ApiAssetsAssetIdTasksTaskIdDateTriggersGetRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return []TypesDateTrigger
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersGetExecute(r ApiAssetsAssetIdTasksTaskIdDateTriggersGetRequest) ([]TypesDateTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TypesDateTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DateTriggersAPIService.AssetsAssetIdTasksTaskIdDateTriggersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/date-triggers"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssetsAssetIdTasksTaskIdDateTriggersPostRequest struct {
	ctx context.Context
	ApiService *DateTriggersAPIService
	assetId string
	taskId string
	typesDateTrigger *TypesDateTrigger
}

// Date Trigger object
func (r ApiAssetsAssetIdTasksTaskIdDateTriggersPostRequest) TypesDateTrigger(typesDateTrigger TypesDateTrigger) ApiAssetsAssetIdTasksTaskIdDateTriggersPostRequest {
	r.typesDateTrigger = &typesDateTrigger
	return r
}

func (r ApiAssetsAssetIdTasksTaskIdDateTriggersPostRequest) Execute() (*TypesDateTrigger, *http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdDateTriggersPostExecute(r)
}

/*
AssetsAssetIdTasksTaskIdDateTriggersPost Create a date trigger

Create a date trigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Task Id
 @return ApiAssetsAssetIdTasksTaskIdDateTriggersPostRequest
*/
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersPost(ctx context.Context, assetId string, taskId string) ApiAssetsAssetIdTasksTaskIdDateTriggersPostRequest {
	return ApiAssetsAssetIdTasksTaskIdDateTriggersPostRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return TypesDateTrigger
func (a *DateTriggersAPIService) AssetsAssetIdTasksTaskIdDateTriggersPostExecute(r ApiAssetsAssetIdTasksTaskIdDateTriggersPostRequest) (*TypesDateTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TypesDateTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DateTriggersAPIService.AssetsAssetIdTasksTaskIdDateTriggersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/date-triggers"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.typesDateTrigger == nil {
		return localVarReturnValue, nil, reportError("typesDateTrigger is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.typesDateTrigger
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
