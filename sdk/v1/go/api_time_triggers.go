/*
PersonaCMMS API

This is the Personal Computer Maintenance Management System REST API.

API version: 1.0
Contact: greenrivercodelabs@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimeTriggersAPIService TimeTriggersAPI service
type TimeTriggersAPIService service

type ApiAssetsAssetIdTasksTaskIdTimeTriggersGetRequest struct {
	ctx context.Context
	ApiService *TimeTriggersAPIService
	assetId string
	taskId string
}

func (r ApiAssetsAssetIdTasksTaskIdTimeTriggersGetRequest) Execute() ([]TypesTimeTrigger, *http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdTimeTriggersGetExecute(r)
}

/*
AssetsAssetIdTasksTaskIdTimeTriggersGet List time triggers

List all time triggers for a task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Asset Task Id
 @return ApiAssetsAssetIdTasksTaskIdTimeTriggersGetRequest
*/
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersGet(ctx context.Context, assetId string, taskId string) ApiAssetsAssetIdTasksTaskIdTimeTriggersGetRequest {
	return ApiAssetsAssetIdTasksTaskIdTimeTriggersGetRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return []TypesTimeTrigger
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersGetExecute(r ApiAssetsAssetIdTasksTaskIdTimeTriggersGetRequest) ([]TypesTimeTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TypesTimeTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTriggersAPIService.AssetsAssetIdTasksTaskIdTimeTriggersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/time-triggers"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssetsAssetIdTasksTaskIdTimeTriggersPostRequest struct {
	ctx context.Context
	ApiService *TimeTriggersAPIService
	assetId string
	taskId string
	typesTimeTrigger *TypesTimeTrigger
}

// Time Trigger object
func (r ApiAssetsAssetIdTasksTaskIdTimeTriggersPostRequest) TypesTimeTrigger(typesTimeTrigger TypesTimeTrigger) ApiAssetsAssetIdTasksTaskIdTimeTriggersPostRequest {
	r.typesTimeTrigger = &typesTimeTrigger
	return r
}

func (r ApiAssetsAssetIdTasksTaskIdTimeTriggersPostRequest) Execute() (*TypesTimeTrigger, *http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdTimeTriggersPostExecute(r)
}

/*
AssetsAssetIdTasksTaskIdTimeTriggersPost Create a time trigger

Create a time trigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Asset Task Id
 @return ApiAssetsAssetIdTasksTaskIdTimeTriggersPostRequest
*/
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersPost(ctx context.Context, assetId string, taskId string) ApiAssetsAssetIdTasksTaskIdTimeTriggersPostRequest {
	return ApiAssetsAssetIdTasksTaskIdTimeTriggersPostRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return TypesTimeTrigger
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersPostExecute(r ApiAssetsAssetIdTasksTaskIdTimeTriggersPostRequest) (*TypesTimeTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TypesTimeTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTriggersAPIService.AssetsAssetIdTasksTaskIdTimeTriggersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/time-triggers"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.typesTimeTrigger == nil {
		return localVarReturnValue, nil, reportError("typesTimeTrigger is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.typesTimeTrigger
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDeleteRequest struct {
	ctx context.Context
	ApiService *TimeTriggersAPIService
	assetId string
	taskId string
	timeTriggerId string
}

func (r ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDeleteExecute(r)
}

/*
AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDelete Delete a time trigger

Delete a time trigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Asset Task Id
 @param timeTriggerId Time Trigger Id
 @return ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDeleteRequest
*/
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDelete(ctx context.Context, assetId string, taskId string, timeTriggerId string) ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDeleteRequest {
	return ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
		timeTriggerId: timeTriggerId,
	}
}

// Execute executes the request
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDeleteExecute(r ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTriggersAPIService.AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/time-triggers/{timeTriggerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"timeTriggerId"+"}", url.PathEscape(parameterValueToString(r.timeTriggerId, "timeTriggerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGetRequest struct {
	ctx context.Context
	ApiService *TimeTriggersAPIService
	assetId string
	taskId string
	timeTriggerId string
}

func (r ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGetRequest) Execute() (*TypesTimeTrigger, *http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGetExecute(r)
}

/*
AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGet Get a time trigger

Get a time trigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Asset Task Id
 @param timeTriggerId Time Trigger Id
 @return ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGetRequest
*/
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGet(ctx context.Context, assetId string, taskId string, timeTriggerId string) ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGetRequest {
	return ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGetRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
		timeTriggerId: timeTriggerId,
	}
}

// Execute executes the request
//  @return TypesTimeTrigger
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGetExecute(r ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGetRequest) (*TypesTimeTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TypesTimeTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTriggersAPIService.AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/time-triggers/{timeTriggerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"timeTriggerId"+"}", url.PathEscape(parameterValueToString(r.timeTriggerId, "timeTriggerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutRequest struct {
	ctx context.Context
	ApiService *TimeTriggersAPIService
	assetId string
	taskId string
	timeTriggerId string
	typesTimeTrigger *TypesTimeTrigger
}

// Time Trigger object
func (r ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutRequest) TypesTimeTrigger(typesTimeTrigger TypesTimeTrigger) ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutRequest {
	r.typesTimeTrigger = &typesTimeTrigger
	return r
}

func (r ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutRequest) Execute() (*TypesTimeTrigger, *http.Response, error) {
	return r.ApiService.AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutExecute(r)
}

/*
AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPut Update a time trigger

Update a time trigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetId Asset Id
 @param taskId Task Id
 @param timeTriggerId Time Trigger Id
 @return ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutRequest
*/
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPut(ctx context.Context, assetId string, taskId string, timeTriggerId string) ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutRequest {
	return ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutRequest{
		ApiService: a,
		ctx: ctx,
		assetId: assetId,
		taskId: taskId,
		timeTriggerId: timeTriggerId,
	}
}

// Execute executes the request
//  @return TypesTimeTrigger
func (a *TimeTriggersAPIService) AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutExecute(r ApiAssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPutRequest) (*TypesTimeTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TypesTimeTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTriggersAPIService.AssetsAssetIdTasksTaskIdTimeTriggersTimeTriggerIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{assetId}/tasks/{taskId}/time-triggers/{timeTriggerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"timeTriggerId"+"}", url.PathEscape(parameterValueToString(r.timeTriggerId, "timeTriggerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.typesTimeTrigger == nil {
		return localVarReturnValue, nil, reportError("typesTimeTrigger is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.typesTimeTrigger
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
