/*
PersonaCMMS API

This is the Personal Computer Maintenance Management System REST API.

API version: 1.0
Contact: greenrivercodelabs@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TypesWorkOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesWorkOrder{}

// TypesWorkOrder struct for TypesWorkOrder
type TypesWorkOrder struct {
	CompletedDate *string `json:"completedDate,omitempty"`
	CumulativeHours *int32 `json:"cumulativeHours,omitempty"`
	CumulativeMiles *int32 `json:"cumulativeMiles,omitempty"`
	Instructions *string `json:"instructions,omitempty"`
	Notes *string `json:"notes,omitempty"`
	Status string `json:"status"`
	Title string `json:"title"`
}

type _TypesWorkOrder TypesWorkOrder

// NewTypesWorkOrder instantiates a new TypesWorkOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesWorkOrder(status string, title string) *TypesWorkOrder {
	this := TypesWorkOrder{}
	this.Status = status
	this.Title = title
	return &this
}

// NewTypesWorkOrderWithDefaults instantiates a new TypesWorkOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesWorkOrderWithDefaults() *TypesWorkOrder {
	this := TypesWorkOrder{}
	return &this
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *TypesWorkOrder) GetCompletedDate() string {
	if o == nil || IsNil(o.CompletedDate) {
		var ret string
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesWorkOrder) GetCompletedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *TypesWorkOrder) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given string and assigns it to the CompletedDate field.
func (o *TypesWorkOrder) SetCompletedDate(v string) {
	o.CompletedDate = &v
}

// GetCumulativeHours returns the CumulativeHours field value if set, zero value otherwise.
func (o *TypesWorkOrder) GetCumulativeHours() int32 {
	if o == nil || IsNil(o.CumulativeHours) {
		var ret int32
		return ret
	}
	return *o.CumulativeHours
}

// GetCumulativeHoursOk returns a tuple with the CumulativeHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesWorkOrder) GetCumulativeHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativeHours) {
		return nil, false
	}
	return o.CumulativeHours, true
}

// HasCumulativeHours returns a boolean if a field has been set.
func (o *TypesWorkOrder) HasCumulativeHours() bool {
	if o != nil && !IsNil(o.CumulativeHours) {
		return true
	}

	return false
}

// SetCumulativeHours gets a reference to the given int32 and assigns it to the CumulativeHours field.
func (o *TypesWorkOrder) SetCumulativeHours(v int32) {
	o.CumulativeHours = &v
}

// GetCumulativeMiles returns the CumulativeMiles field value if set, zero value otherwise.
func (o *TypesWorkOrder) GetCumulativeMiles() int32 {
	if o == nil || IsNil(o.CumulativeMiles) {
		var ret int32
		return ret
	}
	return *o.CumulativeMiles
}

// GetCumulativeMilesOk returns a tuple with the CumulativeMiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesWorkOrder) GetCumulativeMilesOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativeMiles) {
		return nil, false
	}
	return o.CumulativeMiles, true
}

// HasCumulativeMiles returns a boolean if a field has been set.
func (o *TypesWorkOrder) HasCumulativeMiles() bool {
	if o != nil && !IsNil(o.CumulativeMiles) {
		return true
	}

	return false
}

// SetCumulativeMiles gets a reference to the given int32 and assigns it to the CumulativeMiles field.
func (o *TypesWorkOrder) SetCumulativeMiles(v int32) {
	o.CumulativeMiles = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *TypesWorkOrder) GetInstructions() string {
	if o == nil || IsNil(o.Instructions) {
		var ret string
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesWorkOrder) GetInstructionsOk() (*string, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *TypesWorkOrder) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given string and assigns it to the Instructions field.
func (o *TypesWorkOrder) SetInstructions(v string) {
	o.Instructions = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TypesWorkOrder) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesWorkOrder) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TypesWorkOrder) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TypesWorkOrder) SetNotes(v string) {
	o.Notes = &v
}

// GetStatus returns the Status field value
func (o *TypesWorkOrder) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TypesWorkOrder) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TypesWorkOrder) SetStatus(v string) {
	o.Status = v
}

// GetTitle returns the Title field value
func (o *TypesWorkOrder) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TypesWorkOrder) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TypesWorkOrder) SetTitle(v string) {
	o.Title = v
}

func (o TypesWorkOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesWorkOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if !IsNil(o.CumulativeHours) {
		toSerialize["cumulativeHours"] = o.CumulativeHours
	}
	if !IsNil(o.CumulativeMiles) {
		toSerialize["cumulativeMiles"] = o.CumulativeMiles
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	toSerialize["status"] = o.Status
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *TypesWorkOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTypesWorkOrder := _TypesWorkOrder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTypesWorkOrder)

	if err != nil {
		return err
	}

	*o = TypesWorkOrder(varTypesWorkOrder)

	return err
}

type NullableTypesWorkOrder struct {
	value *TypesWorkOrder
	isSet bool
}

func (v NullableTypesWorkOrder) Get() *TypesWorkOrder {
	return v.value
}

func (v *NullableTypesWorkOrder) Set(val *TypesWorkOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesWorkOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesWorkOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesWorkOrder(val *TypesWorkOrder) *NullableTypesWorkOrder {
	return &NullableTypesWorkOrder{value: val, isSet: true}
}

func (v NullableTypesWorkOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesWorkOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


