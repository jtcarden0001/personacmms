/*
PersonaCMMS API

This is the Personal Computer Maintenance Management System REST API.

API version: 1.0
Contact: greenrivercodelabs@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TypesGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesGroup{}

// TypesGroup struct for TypesGroup
type TypesGroup struct {
	Title string `json:"title"`
}

type _TypesGroup TypesGroup

// NewTypesGroup instantiates a new TypesGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesGroup(title string) *TypesGroup {
	this := TypesGroup{}
	this.Title = title
	return &this
}

// NewTypesGroupWithDefaults instantiates a new TypesGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesGroupWithDefaults() *TypesGroup {
	this := TypesGroup{}
	return &this
}

// GetTitle returns the Title field value
func (o *TypesGroup) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TypesGroup) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TypesGroup) SetTitle(v string) {
	o.Title = v
}

func (o TypesGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *TypesGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTypesGroup := _TypesGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTypesGroup)

	if err != nil {
		return err
	}

	*o = TypesGroup(varTypesGroup)

	return err
}

type NullableTypesGroup struct {
	value *TypesGroup
	isSet bool
}

func (v NullableTypesGroup) Get() *TypesGroup {
	return v.value
}

func (v *NullableTypesGroup) Set(val *TypesGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesGroup(val *TypesGroup) *NullableTypesGroup {
	return &NullableTypesGroup{value: val, isSet: true}
}

func (v NullableTypesGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


