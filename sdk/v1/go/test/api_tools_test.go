/*
PersonaCMMS API

Testing ToolsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/jtcarden0001/personacmms/sdk/v1/go"
)

func Test_openapi_ToolsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ToolsAPIService AssetsAssetIdTasksTaskIdToolsToolIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var taskId string
		var toolId string

		httpRes, err := apiClient.ToolsAPI.AssetsAssetIdTasksTaskIdToolsToolIdDelete(context.Background(), assetId, taskId, toolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService AssetsAssetIdTasksTaskIdToolsToolIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var taskId string
		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.AssetsAssetIdTasksTaskIdToolsToolIdPut(context.Background(), assetId, taskId, toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService AssetsAssetIdWorkOrdersWorkOrderIdToolsToolIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var workOrderId string
		var toolId string

		httpRes, err := apiClient.ToolsAPI.AssetsAssetIdWorkOrdersWorkOrderIdToolsToolIdDelete(context.Background(), assetId, workOrderId, toolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService AssetsAssetIdWorkOrdersWorkOrderIdToolsToolIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var workOrderId string
		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.AssetsAssetIdWorkOrdersWorkOrderIdToolsToolIdPut(context.Background(), assetId, workOrderId, toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ToolsAPI.ToolsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ToolsAPI.ToolsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsToolIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		httpRes, err := apiClient.ToolsAPI.ToolsToolIdDelete(context.Background(), toolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsToolIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.ToolsToolIdGet(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolsAPIService ToolsToolIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolId string

		resp, httpRes, err := apiClient.ToolsAPI.ToolsToolIdPut(context.Background(), toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
