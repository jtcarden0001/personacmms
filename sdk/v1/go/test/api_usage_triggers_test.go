/*
PersonaCMMS API

Testing UsageTriggersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/jtcarden0001/personacmms/sdk/v1/go"
)

func Test_openapi_UsageTriggersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsageTriggersAPIService AssetsAssetIdTasksTaskIdUsageTriggersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var taskId string

		resp, httpRes, err := apiClient.UsageTriggersAPI.AssetsAssetIdTasksTaskIdUsageTriggersGet(context.Background(), assetId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsageTriggersAPIService AssetsAssetIdTasksTaskIdUsageTriggersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var taskId string

		resp, httpRes, err := apiClient.UsageTriggersAPI.AssetsAssetIdTasksTaskIdUsageTriggersPost(context.Background(), assetId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsageTriggersAPIService AssetsAssetIdTasksTaskIdUsageTriggersUsageTriggerIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var taskId string
		var usageTriggerId string

		httpRes, err := apiClient.UsageTriggersAPI.AssetsAssetIdTasksTaskIdUsageTriggersUsageTriggerIdDelete(context.Background(), assetId, taskId, usageTriggerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsageTriggersAPIService AssetsAssetIdTasksTaskIdUsageTriggersUsageTriggerIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var taskId string
		var usageTriggerId string

		resp, httpRes, err := apiClient.UsageTriggersAPI.AssetsAssetIdTasksTaskIdUsageTriggersUsageTriggerIdGet(context.Background(), assetId, taskId, usageTriggerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsageTriggersAPIService AssetsAssetIdTasksTaskIdUsageTriggersUsageTriggerIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetId string
		var taskId string
		var usageTriggerId string

		resp, httpRes, err := apiClient.UsageTriggersAPI.AssetsAssetIdTasksTaskIdUsageTriggersUsageTriggerIdPut(context.Background(), assetId, taskId, usageTriggerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
